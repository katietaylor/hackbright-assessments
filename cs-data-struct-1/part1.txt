###############################################################################
Runtime

1.  The number of animal crakers inside of the box determines the workload.
    This would be O(n) where n = number of animal crackers.

2.  O(1)
    O(log n)
    O(n)
    O(n log n)
    O(n^2)
    O(2^n)

###############################################################################
Stacks and Queues

1.  Would a stack or queue be a more appropriate data structure?
    1.1 Stack
    1.2 Queue
    1.3 A Queue would be more appropriate than a stack. However, you would also
        need to evaluate the equation using order of operations, so you couldn't
        evaluate this using a straight left or right expression but would break
        it into groups of the appropriate operators and evaluate those
        individual operators as a queue (possibly using recursion).

2.  Queue examples
    2.1 Orders may use a queue because you want to process the orders in the
        order that they came in.

    2.2 A list of tasks that should happen in order, such as a print queue. The
        first print job submitted happens before the next print job.

3.  Stack examples
    3.1  Pile of dishes to be washed. You will wash the dish on the top first,
         which was also the last dish to be added. This not only makes it less
         likely for you to break dishes but also gives the older dishes longer
         to soak!

    3.2  Browsing history. You want to see the most recent page that you visited
         first because that is more likely what you are interested in at the moment.

###############################################################################
Linked Lists

1.  Nodes = The boxes that contain "Apple", "Berry", and "Cherry"
    Data for node = The data is what is inside the node boxes. In this situation,
        the data is "Apple", "Berry", and "Cherry"
    Head = The head is the node that the head box's arrow is pointing to. In this
        example, it is the Apple node.
    Tail = This linked list has no defined tail. If you wanted to have a tail,
        then in this example, you would point the tail arrow to the cherry node.

2.  Linked lists have arrows pointing to the next node. Doubly linked lists have
    arrows pointing to both the next node and the previous node. This makes it
    faster to step backwards through the list.

3.  Without a tail, you have to traverse the whole linked list to find the node
    that has a next value of None. Then you can append the new node there. With 
    a tail, you don't have to travers the list and can instead jump directly to
    the tail node, append the new node to the tail, and then reassign the tail
    to the new node. This reduces runtime complexity from O(n) to O(1).

###############################################################################
Trees

1.  food, Italian, Indian, Mexican, lasagna, pizza, tikka masala, saag, burritos

2.  Assuming the algorithm used in tree.py, which searches the right side of the
    tree before the left side of the tree:
    food, 
    Mexican, enchilada, tacos, burritos, 
    Indian, saag tikka masala,
    Italian, pizza, Sicilian, New York-style, Chicago-style

3.  In a binary search tree, every parent can have at most 2 children (left and
    right) and the children have a sense of order. A common rule for arranging 
    the children is that the left child is less than the right child. This makes
    searching a binary tree faster since you can cut the search in half each
    time ( O(log n) ), assuming the binary tree is well balanced.








